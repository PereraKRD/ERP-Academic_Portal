// <auto-generated />
using System;
using ERP.RequestManagement.DataService;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ERP.RequestManagement.DataService.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240510070151_Add_StaffRequest_Table")]
    partial class Add_StaffRequest_Table
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0-preview.3.24172.4");

            modelBuilder.Entity("ERP.RequestManagement.Core.Entity.Batch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("BatchName")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Batches");
                });

            modelBuilder.Entity("ERP.RequestManagement.Core.Entity.StaffRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Header")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsChecked")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RecieverId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RecieverId");

                    b.HasIndex("SenderId");

                    b.ToTable("StaffRequests");
                });

            modelBuilder.Entity("ERP.RequestManagement.Core.Entity.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AcademicAdvisorId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("BatchId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RegistrationNum")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AcademicAdvisorId");

                    b.HasIndex("BatchId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("ERP.RequestManagement.Core.Entity.StudentRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Header")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsChecked")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RecieverId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RecieverId");

                    b.HasIndex("SenderId");

                    b.ToTable("StudentRequests");
                });

            modelBuilder.Entity("ERP.RequestManagement.Core.Entity.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("ERP.RequestManagement.Core.Entity.TeacherRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Header")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsChecked")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RecieverId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RecieverId");

                    b.HasIndex("SenderId");

                    b.ToTable("TeacherRequests");
                });

            modelBuilder.Entity("ERP.RequestManagement.Core.Entity.StaffRequest", b =>
                {
                    b.HasOne("ERP.RequestManagement.Core.Entity.Teacher", "Reciever")
                        .WithMany()
                        .HasForeignKey("RecieverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.RequestManagement.Core.Entity.Teacher", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reciever");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("ERP.RequestManagement.Core.Entity.Student", b =>
                {
                    b.HasOne("ERP.RequestManagement.Core.Entity.Teacher", "AcademicAdvisor")
                        .WithMany("AcademicAdvicees")
                        .HasForeignKey("AcademicAdvisorId");

                    b.HasOne("ERP.RequestManagement.Core.Entity.Batch", "Batch")
                        .WithMany("BatchStudents")
                        .HasForeignKey("BatchId");

                    b.Navigation("AcademicAdvisor");

                    b.Navigation("Batch");
                });

            modelBuilder.Entity("ERP.RequestManagement.Core.Entity.StudentRequest", b =>
                {
                    b.HasOne("ERP.RequestManagement.Core.Entity.Teacher", "Reciever")
                        .WithMany("TIncomingRequests")
                        .HasForeignKey("RecieverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.RequestManagement.Core.Entity.Student", "Sender")
                        .WithMany("SOutgoingRequests")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reciever");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("ERP.RequestManagement.Core.Entity.TeacherRequest", b =>
                {
                    b.HasOne("ERP.RequestManagement.Core.Entity.Student", "Reciever")
                        .WithMany("SIncomingRequests")
                        .HasForeignKey("RecieverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.RequestManagement.Core.Entity.Teacher", "Sender")
                        .WithMany("TOutgoingRequests")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reciever");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("ERP.RequestManagement.Core.Entity.Batch", b =>
                {
                    b.Navigation("BatchStudents");
                });

            modelBuilder.Entity("ERP.RequestManagement.Core.Entity.Student", b =>
                {
                    b.Navigation("SIncomingRequests");

                    b.Navigation("SOutgoingRequests");
                });

            modelBuilder.Entity("ERP.RequestManagement.Core.Entity.Teacher", b =>
                {
                    b.Navigation("AcademicAdvicees");

                    b.Navigation("TIncomingRequests");

                    b.Navigation("TOutgoingRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
