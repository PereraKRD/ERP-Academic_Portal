@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<MudPaper Width="250px" Class="d-inline-flex py-3" Elevation="0">
    <MudNavMenu Class="mud-width-full">

        <MudDivider Class="my-2" />

        <MudNavGroup Title="Academic" Icon="@Icons.Material.Filled.School" IconColor="Color.Primary" Expanded="true">
            <MudNavMenu Rounded="true" Margin="Margin.Normal" Color="Color.Error" Class="pa-2">
                <MudNavLink Href="/ModuleManagementTabs" Icon="@Icons.Material.Filled.Subject" IconColor="Color.Primary">Modules</MudNavLink>
                <MudNavLink Href="/ResultManagementTabs" Icon="@Icons.Material.Filled.Assessment" IconColor="Color.Primary">Results</MudNavLink>
                <MudNavLink Href="/MentoringManagementPage" Icon="@Icons.Material.Filled.People" IconColor="Color.Primary">Mentoring</MudNavLink>
                <MudNavLink Href="/RequestManagementTabs" Icon="@Icons.Material.Filled.CompareArrows" IconColor="Color.Primary">Requests</MudNavLink>
            </MudNavMenu>
        </MudNavGroup>
    </MudNavMenu>
</MudPaper>

    @code {
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}