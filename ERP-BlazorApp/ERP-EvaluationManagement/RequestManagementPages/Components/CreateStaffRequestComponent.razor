@using FluentValidation
@using ERP_EvaluationManagement.DTOs.Requests
@using Newtonsoft.Json
@using System.Text
@using Severity = MudBlazor.Severity
@inject ISnackbar Snackbar

<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudContainer Class="result-container">
    <MudCard Class="mud-card">
        <MudForm Model="@staffRequest" @ref="@form" Validation="@(evaluationValidator.ValidateValue)"
                 ValidationDelay="0">
            <MudCardContent Class="mud-card-content">
                <h5 style="text-align: center;">MAKE REQUEST</h5>

                <MudSelect @bind-Value="staffRequest.Header" Label="Header">
                    <MudSelectItem Value="1">Module Related</MudSelectItem>
                    <MudSelectItem Value="2">Medical</MudSelectItem>
                    <MudSelectItem Value="3">Academic Advisee</MudSelectItem>
                    <MudSelectItem Value="4">Late Submissions</MudSelectItem>
                    <MudSelectItem Value="5">Other</MudSelectItem>
                </MudSelect>

                <MudTextField @bind-Value="staffRequest.Message"
                              For="@(() => staffRequest.Message)"
                              Immediate="true"
                              Label="Message" />


            </MudCardContent>
            <MudCardActions Class="mud-card-actions">
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           Class="mud-button-add"
                           OnClick="@(async () => await Submit())">Send</MudButton>
            </MudCardActions>

        </MudForm>
    </MudCard>
</MudContainer>
@code {
    [Parameter]
    public Guid SenderId { get; set; }
    [Parameter]
    public EventCallback onAdded { get; set; }

    private CreateStaffMessageRequest staffRequest = new CreateStaffMessageRequest();

    private HttpClient Http = new HttpClient();

    EvaluationModelValidator evaluationValidator = new EvaluationModelValidator();
    MudForm form;

    public class EvaluationModelValidator : AbstractValidator<CreateStaffMessageRequest>
    {
        public EvaluationModelValidator()
        {
            RuleFor(x => x.Message)
                .NotEmpty();

            RuleFor(x => x.Header)
                .InclusiveBetween(1, 5);

        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (staffRequest, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<CreateStaffMessageRequest>
                                .CreateWithOptions((CreateStaffMessageRequest)staffRequest, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }

    private async Task Submit()
    {

        await form.Validate();

        if (form.IsValid)
        {
            try
            {
                // Prepare the evaluation data to be sent to the API
                var evaluationData = new
                {
                    Message = staffRequest.Message,
                    Type = staffRequest.Header,
                };

                // Convert the evaluation data to JSON
                var evaluationJson = JsonConvert.SerializeObject(evaluationData);

                // Set up the request message
                var request = new HttpRequestMessage
                    {
                        Method = HttpMethod.Post,
                        RequestUri = new Uri($"https://localhost:7256/api/StaffRequest/af8ad6c4-46f2-4bf8-9628-9cf34e122893/{SenderId}"),
                        Content = new StringContent(evaluationJson, Encoding.UTF8, "application/json")
                    };

                // Send the request and await the response
                var response = await Http.SendAsync(request);

                if (response.IsSuccessStatusCode)
                {
                    await onAdded.InvokeAsync();
                }
                else
                {
                    Console.WriteLine($"Failed to create evaluation. Status code: {response.StatusCode}");
                }

            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred: {ex.Message}");
            }
        }
    }


}
