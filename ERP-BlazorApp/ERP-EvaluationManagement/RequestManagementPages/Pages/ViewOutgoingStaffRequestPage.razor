@using ERP_EvaluationManagement.DTOs.Responses
@using System.Net.Http.Json
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

@if (_staffOutgoingRequest != null)
{
    <MudPaper Elevation="2" Class="email-paper" Style="padding:15px;">
        <MudPaper Class="d-flex justify-center flex-grow-1 gap-4 mb-5" Elevation="0" Style="background-color:aliceblue">
            <h1 style="width:fit-content; font-style:initial">Outgoing Staff Request Information</h1>
        </MudPaper>

        <MudPaper Class="pl-5 pt-5" Elevation="4" Style="@($"background:{Colors.LightBlue.Lighten5};")">
            <MudList>
                <h2 style="font-weight:bolder">
                    Reciever
                </h2>
                <MudListItem Icon="@Icons.Material.Filled.Circle" IconSize="Size.Small">
                    @_staffOutgoingRequest.RecieverName
                </MudListItem>
                <h3 style="font-weight:bolder">
                    Subject
                </h3>
                <MudListItem Icon="@Icons.Material.Filled.Circle" IconSize="Size.Small">
                    Staff Request
                </MudListItem>
                <h3 style="font-weight:bolder">
                    Header
                </h3>
                <MudListItem Icon="@Icons.Material.Filled.Circle" IconSize="Size.Small">
                    @GetTypeAsString(@_staffOutgoingRequest.Header)
                </MudListItem>

                <MudDivider DividerType="DividerType.Middle" Class="my-6" />

                <h2 style="font-weight:bolder">
                    Message
                </h2>
                <div class="email-content">
                    <MudText class="sender-name pb-3" style="color:black">@_staffOutgoingRequest.Message</MudText>
                    </div>
                </MudList>
            </MudPaper>

            <div class="reply-button mt-5">
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.Reply" Color="Color.Primary" @onclick="() => ViewModuleInformation(_staffOutgoingRequest.SenderId)">
                    Reply
                </MudButton>
            </div>
    </MudPaper>
}
else
{
    <p>Module offering information not found.</p>
}

<style>
    .email-paper {
        margin-bottom: 20px;
    }

    .email-header {
        border-bottom: 1px solid #ccc;
        padding-bottom: 10px;
        margin-bottom: 10px;
    }

    .sender-info {
        font-weight: bold;
        margin-bottom: 5px;
    }

    .sender-name {
        margin-right: 10px;
    }

    .subject-line {
        font-style: italic;
    }

    .email-content {
        margin-bottom: 15px;
    }

    .reply-button {
        text-align: center;
    }
</style>

@code {

    [Parameter]
    public Guid RequestId { get; set; }
    [Parameter]
    public Guid SenderId { get; set; }

    private HttpClient Http = new HttpClient();

    private GetStaffMessagesResponse? _staffOutgoingRequest;

    protected override async Task OnInitializedAsync()
    {
        await LoadModuleOfferingInfoAsync(RequestId);
    }

    private async Task LoadModuleOfferingInfoAsync(Guid requestId)
    {
        try
        {
            _staffOutgoingRequest = await Http.GetFromJsonAsync<GetStaffMessagesResponse>($"https://localhost:7256/api/StaffRequest/{requestId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred while loading module offering: {ex.Message}");
        }
    }

    private void ViewModuleInformation(Guid senderId)
    {
        NavigationManager.NavigateTo($"/RequestManagementTabs/StaffRequestCreate/{senderId}");
    }

    private string GetTypeAsString(int type)
    {
        switch (type)
        {
            case 1:
                return "Module Related";
            case 2:
                return "Medical";
            case 3:
                return "Academic Advise";
            case 4:
                return "Late Submissions";
            case 5:
                return "Other";
            default:
                return "Unknown";
        }
    }
}
