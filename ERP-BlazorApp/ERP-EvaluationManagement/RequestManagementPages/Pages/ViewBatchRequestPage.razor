@using ERP_EvaluationManagement.DTOs.Responses
@using System.Net.Http.Json
@inject NavigationManager NavigationManager

@inject ISnackbar Snackbar


@if (_batchStudents != null)
{
    <div class="pt-4">
        <h3 class="result-header"> Batch Student List </h3>
    </div>

    <MudTable Items="@_batchStudents">
        <HeaderContent>
            <MudTh>Registration Number</MudTh>
            <MudTh>Full Name</MudTh>
            <MudTh>Email</MudTh>
            <MudTh>Academic Advisor Name</MudTh>
            <MudTh>Batch Name</MudTh>
            <MudTh>Make Request</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.RegistrationNum</MudTd>
            <MudTd>@context.FullName</MudTd>
            <MudTd>@context.Email</MudTd>
            <MudTd>@context.AcademicAdvisorName</MudTd>
            <MudTd>@context.BatchName</MudTd>
            <MudTd>
                <MudButton @onclick="(() => ViewModuleInformation(context.StudentId))">Request</MudButton>

            </MudTd>
        </RowTemplate>
    </MudTable>



}
else
{
    <p>Module offering information not found.</p>
}


@code {

    [Parameter]
    public Guid BatchId { get; set; }

    private HttpClient Http = new HttpClient();

    private List<GetBatchStudentsResponse>? _batchStudents;

    protected override async Task OnInitializedAsync()
    {
        await LoadModuleOfferingInfoAsync(BatchId);
    }

    private async Task LoadModuleOfferingInfoAsync(Guid batchId)
    {
        try
        {
            _batchStudents = await Http.GetFromJsonAsync<List<GetBatchStudentsResponse>>($"https://localhost:7256/api/Student/{batchId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred while loading module offering: {ex.Message}");
        }
    }

    private void ViewModuleInformation(Guid recieverId)
    {
        NavigationManager.NavigateTo($"/RequestManagementTabs/RequestCreate/{recieverId}");
    }

}

