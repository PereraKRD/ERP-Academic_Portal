@using ERP_EvaluationManagement.DTOs.Responses
@using System.Net.Http.Json
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<MudContainer Class="result-container">

<MudTable Items="@_evaluations">
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Type</MudTh>
            <MudTh>Out of Final Marks</MudTh>
            <MudTh>Total Marks Given</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">
                <MudButton > @context.EvaluationName</MudButton>
            </MudTd>
            <MudTd DataLabel="Type">@context.EvaluationType</MudTd>
            <MudTd DataLabel="Out of Final Marks">@context.EvaluationFinalMarks</MudTd>
            <MudTd DataLabel="Total Marks Given">@context.EvaluationMarks</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" />
            </MudTd>
        </RowTemplate>
    </MudTable>
    </MudContainer>

@code {
    [Parameter]
    public Guid ModuleOfferingId { get; set; }
    
    private HttpClient Http = new HttpClient();
    private List<GetEvaluationDetailsResponse> _evaluations = new List<GetEvaluationDetailsResponse>();
    
    protected override async Task OnInitializedAsync()
    {
        _evaluations = await Http.GetFromJsonAsync<List<GetEvaluationDetailsResponse>>($"http://localhost:5007/api/Evaluation/{ModuleOfferingId}");
    }
    
@*    
    async Task EditEvaluation(Evaluation evaluation)
    {
        var parameters = new DialogParameters { ["evaluation"] = evaluation };
        var dialog = DialogService.Show<EditEvaluationdialog>("Edit Evaluation", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is true)
        {
             await RefreshEvaluations();
        }
    }
    
     async Task RefreshEvaluations()
    {
        ModuleOffering = await GetModuleOfferingByIdUseCase.ExecuteAsync(ModuleOfferingId);
        _evaluations = ModuleOffering.Evalutions.ToList();
        StateHasChanged(); 
    }

    async Task DeleteEvaluation(int evaluationId)
    {
        var parameters = new DialogParameters { ["EvaluationId"] = evaluationId };
        var dialog = DialogService.Show<ConfirmEvaluationDeleteDialog>("Confirm Delete", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is true)
        {
            await RefreshEvaluations();
        }
    }
    
    private void ViewEvaluationInformation(int moduleOfferingId,int evaluationId)
    {
        NavigationManager.NavigateTo($"/ModuleManagementTabs/{moduleOfferingId}/{evaluationId}");
    }

*@
}

<link rel="stylesheet" href="styles.css" />