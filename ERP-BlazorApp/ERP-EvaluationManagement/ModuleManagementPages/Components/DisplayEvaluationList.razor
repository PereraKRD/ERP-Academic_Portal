@using ERP_EvaluationManagement.DTOs.Responses
@using System.Net.Http.Json
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<MudContainer Class="result-container">
    <MudTable Items="@_evaluations">
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Type</MudTh>
            <MudTh>Out of Final Marks</MudTh>
            <MudTh>Total Marks Given</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">
                <MudButton OnClick="@(() => ViewEvaluationInformation(ModuleOfferingId, @context.EvaluationId))"> @context.EvaluationName</MudButton>
            </MudTd>
            <MudTd DataLabel="Type">@context.EvaluationType</MudTd>
            <MudTd DataLabel="Out of Final Marks">@context.EvaluationFinalMarks</MudTd>
            <MudTd DataLabel="Total Marks Given">@context.EvaluationMarks</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@( () => DeleteEvaluation(context.EvaluationId) )" />
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudContainer>

@code {
    [Parameter]
    public Guid ModuleOfferingId { get; set; }
    
    private HttpClient Http = new HttpClient();
    private List<GetEvaluationDetailsResponse> _evaluations = new List<GetEvaluationDetailsResponse>();
    
    protected override async Task OnInitializedAsync()
    {
        await LoadEvaluationsAsync();
    }
    
    private async Task LoadEvaluationsAsync()
    {
        try
        {
            _evaluations = await Http.GetFromJsonAsync<List<GetEvaluationDetailsResponse>>($"http://localhost:5007/api/Evaluation/{ModuleOfferingId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred while loading evaluations: {ex.Message}");
        }
    }
    
    async Task DeleteEvaluation(Guid evaluationId)
    {
        try
        {
            // request message
            var request = new HttpRequestMessage
            {
                Method = HttpMethod.Delete,
                RequestUri = new Uri($"https://localhost:7007/api/Evaluation/{evaluationId}")
            };

            // Send the request and await the response
            var response = await Http.SendAsync(request);
            
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Evaluation Deleted Successfully", Severity.Error);
                await LoadEvaluationsAsync();
            }
            else
            {

                Snackbar.Add("Failed to delete evaluation", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
        /*
        var parameters = new DialogParameters { ["EvaluationId"] = evaluationId };
        var dialog = await DialogService.ShowAsync<ConfirmEvaluationDeleteDialog>("Confirm Delete", parameters);
        var result = await dialog.Result;
        */
    } 
    
    private void ViewEvaluationInformation(Guid moduleOfferingId,Guid evaluationId)
    {
        NavigationManager.NavigateTo($"/ModuleManagementTabs/{moduleOfferingId}/{evaluationId}");
    }

}


@*    
    async Task EditEvaluation(Evaluation evaluation)
    {
        var parameters = new DialogParameters { ["evaluation"] = evaluation };
        var dialog = DialogService.Show<EditEvaluationdialog>("Edit Evaluation", parameters);
        var result = await dialog.Result;
        
    }

*@